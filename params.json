{"name":"PHP Testing Starter","tagline":"Getting started with PHP and UnitTesting, the easy way!","body":"# PHP Testing Starter\r\n> Step by step tutorial for developers that want to start testing their web applications.\r\n\r\nThis is a step by step tutorial that should help you start testing your PHP application. The goal of this document is ment to:\r\n\r\n  - Provide you with a **reliable resource** to start testing your PHP code.\r\n  - Provide you with **quick copy-paste** code references.\r\n  - Let you **focus on the important aspects** like writing unit tests.\r\n\r\n## Contributing\r\n\r\nIf you want to contribute to this book, here are a couple of rules to which we adhere:\r\n * KISS (Keep it simple, stupid) when providing examples and case-studies.\r\n * When providing code examples use the conventions that already exists in this book.\r\n * Try to provide real world testing scenarios.\r\n\r\n## Summary\r\n\r\n**Chapter 1** - _Setting up your project_\r\n * [Initial set-up](#initial-set-up)\r\n * [Files and folders explained](#files-and-folders-explained)\r\n * [Downloading needed tools](#downloading-needed-tools)\r\n * [Running the first test](#running-the-first-test)\r\n\r\n**Chapter 2** - _Start testing_\r\n * Testing by stubbing methods\r\n * Testing by mocking objects\r\n \r\n**Chapter 3** - _Testing special cases_\r\n * Testing `protected` and `private` methods\r\n * Reading and writing `protected` and `private` attributes\r\n * Testing methods using data providers\r\n * [Testing `abstract` classes](#testing-abstract-classes)\r\n * Testing system specific functions\r\n * Testing `Exceptions` and errors\r\n\r\n**Chapter 4** - _Code optimizations_\r\n * Making your code testable\r\n * Group tests by test suites\r\n\r\n**Chapter 5** - _Show me the money!_\r\n* Test results \r\n* Code coverage\r\n \r\n\r\n## Chapter 1\r\n> Setting up your project\r\n\r\n### Initial set-up\r\n\r\nCreate your project folder structure. If this is a **new project**, you can use dummy files and classes first and replace them later.\r\nIt should look similar to:\r\n\r\n```\r\n |-[+] lib\r\n |   |- FirstClass.php\r\n |   \\- SecondClass.php\r\n |\r\n |-[+] tests\r\n |  |- [+] fixtures\r\n |  |- [+] providers\r\n |  |- [+] lib\r\n |  |   \\- [+] FirstClass\r\n |  |       |- firstMethodTest.php\r\n |  |       |- secondMethodTest.php\r\n |  |       \\- constructorTest.php\r\n |  |\r\n |  |- phpunit.xml\r\n |  \\- bootstrap.php\r\n |\r\n |- .gitignore\r\n \\- composer.json\r\n```\r\n\r\n### Files and folders explained\r\n\r\nOur pet PHP project is called `MyProject`. Remember this, because it's the only fixed notion about this tutorial. We assume that all our files are under a single folder called `MyProject` and `MyProject/lib/` is mapped to `\\MyProject` unique namespace.\r\n\r\n`lib/` is the folder that contains **all your classes** and main logic. You will find this folder in other projects also named: `src`, `source` or similar. The main reason why you should keep everything in one folder (subfoldes) is namespacing your project.\r\n\r\n`FirstClass.php` is one of your classes.\r\n\r\n```php\r\nnamespace MyProject;\r\n\r\nclass FirstClass\r\n{\r\n}\r\n```\r\n\r\n`tests/` is the folder containing all your tests and other useful files needed during the testing. In other projects you can find this folder named as `test/`.\r\n\r\n`tests/fixtures/` and `tests/providers/` can contain static data needed for some specific tests. You can ignore these for now.\r\n\r\n`tests/lib/FirstClass/` is a the folder containing all the test files for `FirstClass` class. In other project this is just a file (e.g. `FirstClassTest.php`), but you will see later why is better to be a folder. This is entirely up to you and your project.\r\n\r\n`tests/lib/FirstClass/*Test.php` are files specific to each method inside the `FirstClass` class.\r\n\r\n`tests/phpunit.xml` is the file with the main PHPUnit configurations. By convention this is stored in an xml file so you don't have to repeat the same commands when running your PHPUnit tests.\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<phpunit\r\n        colors=\"true\"\r\n        verbose=\"false\"\r\n        bootstrap=\"bootstrap.php\"\r\n        convertErrorsToExceptions=\"true\"\r\n        convertNoticesToExceptions=\"true\"\r\n        convertWarningsToExceptions=\"true\"\r\n        strict=\"true\">\r\n\r\n    <testsuite name=\"All tests\">\r\n        <directory suffix=\"Test.php\">lib</directory>\r\n    </testsuite>\r\n</phpunit>\r\n```\r\n\r\n`tests/bootstrap.php` is a file used by the PHPUnit to start your tests. You can put here various global settings. This is the place where to initiate the **autoloader** for your test files.\r\n\r\n```php\r\n<?php\r\n$composer = dirname(__FILE__) . '/../vendor/autoload.php';\r\nif (!file_exists($composer)) {\r\n    throw new \\RuntimeException(\"Please run 'composer install' first to set up autoloading. $composer\");\r\n}\r\n\r\n/**\r\n * @var \\Composer\\Autoload\\ClassLoader $autoloader\r\n */\r\n$autoloader = include_once $composer;\r\n$autoloader->add('MyProjectTest\\\\', dirname(__FILE__) . '/tests/lib/');\r\n```\r\n\r\n`MyProjectTest` is the namespace where we will keep our tests. The final line of code is optional if you already configured in in `composer.json`. If you're using your own **autoloader** then you must include it.\r\n\r\n`.gitignore` is a file that contains all the directories and files that will be excluded from Git commits.\r\n\r\n```\r\ncomposer.lock\r\nvendor/\r\ncomposer.phar\r\nphpunit.phar\r\n```\r\n\r\nFinally, `composer.json` is the configuration file for composer. The `require-dev` and `autoload` keys are very important for our project to work.\r\n\r\n```json\r\n{\r\n  \"name\": \"yourname/myproject\",\r\n  \"type\": \"library\",\r\n  \"description\": \"A demo project.\",\r\n  \"keywords\": [\"project\", \"demo\", \"php project\"],\r\n  \"homepage\": \"https://github.com/yourname/MyProject\",\r\n  \"license\": \"MIT\",\r\n  \"require\": {\r\n    \"php\": \">=5.3.0\"\r\n  },\r\n  \"require-dev\": {\r\n    \"phpunit/phpunit\": \"*\"\r\n  },\r\n  \"autoload\": {\r\n    \"psr-4\": {\r\n      \"MyProject\\\\\": \"lib/\",\r\n      \"MyProjectTest\\\\\": \"tests/lib/\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### Downloading needed tools\r\n\r\n1. Download latest snapshot of [composer.phar]. Put it in your project's root or make it available global.\r\n2. Download latest [phpunit.phar]. Same as above.\r\n\r\n### Running the first test\r\n\r\n```sh\r\ncd MyProject/\r\nphp composer.phar diag\r\n```\r\n\r\nYou should be *OK* at this point. If you see any problems here, consult the [possible composer issues] subsection.\r\n\r\n```sh\r\nphp composer.phar install\r\nphp phpunit.phar -c tests/phpunit.xml\r\n```\r\n\r\nThe output should be:\r\n\r\n```text\r\nPHPUnit 4.4.0 by Sebastian Bergmann.\r\nConfiguration read from /path/to/MyProject/tests/phpunit.xml\r\n.\r\nTime: 244 ms, Memory: 3.75Mb\r\nOK (1 test, 1 assertion)\r\n```\r\n\r\nCongratulations! If you made it this far then you might as well think about starring this project and support us.\r\n\r\n[composer.phar]:https://getcomposer.org/composer.phar\r\n[phpunit.phar]:https://phar.phpunit.de/phpunit.phar\r\n[possible composer issues]:#aaa\r\n\r\n## Chapter 3\r\n> Testing special cases\r\n\r\n### Testing abstract classes\r\n\r\nUsually you have classes like this in your code `class Socks extends AbstractTransport implements TransportInterface`. While in `Socks` class you're confronted with concrete `public`, `protected` and `private` methods in an abstract class declaration like `AbstractTransport` you can also have `abstract` methods.\r\n\r\nAbstract methods have no implmenentation hence they will be tested in the class that implements that `abstract` class (e.g. `Socks`). So why are we talking about abstract classes and methods? Because `abstract` classes can have concrete methods implementations and that should be tested!\r\n\r\nLet's take an example of `abstract` class declaration and try to test `setPort` and `getPort` signature methods.\r\n\r\n```php\r\nabstract class AbstractTransport\r\n{\r\n  protected $port;\r\n  \r\n  public function setPort($port)\r\n  {\r\n    $this->port = (int)$port;\r\n  }\r\n  \r\n  public function getPort()\r\n  {\r\n    return $this->port;\r\n  }\r\n}\r\n```\r\n\r\nHere is how you can test both concrete methods from the `abstract` class `AbstractTransport`:\r\n\r\n```php\r\n    /**\r\n     * set port sets the desired port\r\n     */\r\n    public function testSetPortSetsTheDesiredPort()\r\n    {\r\n        $inputPort = 8080;\r\n        $mock = $this->getMockForAbstractClass('\\MyProject\\Transport\\AbstractTransport');\r\n        $mock->setPort($inputPort);\r\n\r\n        $this->assertEquals($inputPort, $mock->getPort());\r\n    }\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}